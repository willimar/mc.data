// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mc.core.data.Context;

namespace mc.core.data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190406002840_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mc.core.domain.register.Entity.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid?>("StateId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CityId");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Number")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7);

                    b.Property<Guid?>("PersonId");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("PublicPlace")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Gender");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.PersonalContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactType");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonalContact");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.City", b =>
                {
                    b.HasOne("mc.core.domain.register.Entity.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.Address", b =>
                {
                    b.HasOne("mc.core.domain.register.Entity.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("mc.core.domain.register.Entity.Person.Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.Document", b =>
                {
                    b.HasOne("mc.core.domain.register.Entity.Person.Person")
                        .WithMany("Documents")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.Person", b =>
                {
                    b.HasOne("mc.core.domain.register.Entity.Person.Person")
                        .WithMany("Dependents")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.Person.PersonalContact", b =>
                {
                    b.HasOne("mc.core.domain.register.Entity.Person.Person")
                        .WithMany("PersonalContacts")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("mc.core.domain.register.Entity.State", b =>
                {
                    b.HasOne("mc.core.domain.register.Entity.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
